#!/usr/bin/env python
# encoding: utf-8
'''
OptParseTest -- shortdesc

OptParseTest is a description

It defines classes_and_methods

@author:     Ken

'''

import sys
import os
import imp
import json
from json import JSONEncoder

from optparse import OptionParser

from django.conf import settings
settings.configure()

__all__ = []
__version__ = 0.1
__date__ = '2013-11-18'
__updated__ = '2013-11-18'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

class MyEncoder(JSONEncoder):
    def default(self, o):
        return o.__dict__


def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2013 user_name (organization_name)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[0:]

    # setup option parser
    #add operation spec, model spec, and application spec
    #check to see if the files can be loaded, (How to import a file given the full path)

    #import imp
    #foo= imp.load_source('module.name', '/path/to/file.py')
    #foo.MyClass()
    parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
    parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: 1]", default=1)
    parser.add_option("-o", "--operations", dest="operations", help="Sets the file path for the operations file", metavar="FILE", default='./API.py')
    parser.add_option("-m", "--models", dest="models", help="Sets the file path for the models file", metavar="FILE", default='./serializers.py')
    parser.add_option("-a", "--appications", dest="applications", help="Sets the file path for the applications file", metavar="FILE",default='./Application.py')
    parser.add_option("-p", "--prefix", dest="prefix", help="Path for the url", metavar="FILE",default='/rest/v2/')

    # set defaults, add logic to see if there are no defaults, throw an exception
    #parser.set_defaults(operations="out.txt", models="in.txt", applications="")

    #os. "Dan", "Documents", etc.
    (opts, args) = parser.parse_args()
    #opts.operations = 'rest/v2/views/TagGroups/multiple/api/'

# MAIN BODY #
    sys.path.append(os.path.dirname('BioDIG/rest/v2/views/TagGroups/multiple/api/'))
    Operations = __import__(os.path.basename('API'))

    sys.path.append(os.path.dirname('BioDIG/rest/v2/views/TagGroups/multiple/'))
    Applications = __import__(os.path.basename('Application'))

    sys.path.append(os.path.dirname('BioDIG/base/'))
    Models = __import__(os.path.basename('serializers'))

    import inspect

    #Initialize JSON object
    jsonString = {}
    jsonString["apiVersion"] = "1.0"
    jsonString["swaggerVersion"] = "1.1"
    tempDict = {}
    tempString = []

    #Iterate through Applications
    appSwagger = None
    for name,obj in inspect.getmembers(Applications):#, inspect.isclass or inspect.ismethod or inspect.ismodule or inspect.isfunction):
        #print obj
        if(hasattr(obj, 'application')):
            appSwagger = obj.application
            jsonString["resourcePath"] = appSwagger.path
            jsonString["api"] = []
            tempDict["path"] = appSwagger.path
            tempDict["description"] = appSwagger.desc
            break

    if not appSwagger:
        raise AppError("No Application decorator found")


    #Iterate through Operations
    opsSwagger = []
    tempDict["operations"] = []
    for name,obj in inspect.getmembers(Operations):
        if(hasattr(obj, 'operations')):
            print name
            tempOp = {}
            opsSwagger.append(obj.operations)
            tempOpsSwagger = obj.operations
            tempOp["httpMethod"] = tempOpsSwagger.method
            tempOp["summary"] = tempOpsSwagger.summary
            tempOp["nickname"] = tempOpsSwagger.nickname
            tempOp["responseClass"] = tempOpsSwagger.obj;
            tempOp["parameters"] = []
            for name  in tempOpsSwagger.params:
                tempPar = {}
                tempPar["name"] = tempOpsSwagger.params.get(name).name
                tempPar["paramType"] = tempOpsSwagger.params.get(name).paramType
                tempPar["required"] = tempOpsSwagger.params.get(name).required
                if(tempOpsSwagger.params.get(name).dataType != ""):
                    tempPar["dataType"] = tempOpsSwagger.params.get(name).dataType
                tempPar["description"] = tempOpsSwagger.params.get(name).description
                tempOp["parameters"].append(dict(tempPar))
            tempDict["operations"].append(dict(tempOp))
    tempString.append(dict(tempDict))
    jsonString["api"] = tempString

    if not opsSwagger:
        raise AppError("No Operations decorator found")


    #Iterate through Model
    mpsSwagger = None
    jsonString["models"] = {}
    tempModel = {}
    for name,obj in inspect.getmembers(Models):
        if(hasattr(obj, 'model')):
            for i in opsSwagger:
                #print i.obj
                if(name == i.obj): #if model name equals to operation.obj
                    key = i.obj
                    if key not in tempModel:
                        tempModel[i.obj] = {}
                        tempSubModel = {}
                        #print obj.Meta.model.__name__
                        mpsSwagger = obj.model
                        tempSubModel["properties"] = {}
                        tempSubModel["id"] = i.obj
                        tempAtt = {}
                        for name in mpsSwagger.attributes:
                            tempAtt[name] = {'type':mpsSwagger.attributes.get(name).typ}
                        tempSubModel["properties"] = tempAtt
                        tempModel[i.obj] = tempSubModel

    if not mpsSwagger:
        raise AppError("No Models decorator found")

    jsonString["models"] = tempModel

    #print MyEncoder().encode(jsonString)
    print json.dumps(jsonString, sort_keys=False,indent=4, separators=(',', ': ')) #Print json / currently out of order

    #for DEBUG purpose
    if opts.verbose == 2:
        print "\n"
        #List Object inside Operations
        print "___Operations structure___\n"
        for i in dir(Operations):
            print i,"  ",type(getattr(Operations,i))

        print "\n\n"
        #List Object inside Operations
        print "___Models structure___\n"
        for i in dir(Models):
            print i,"  ",getattr(Models,i)

        print "\n\n"
        #List Object inside Operations
        print "___Applications structure___\n"
        for i in dir(Applications):
            print i,"  ",type(getattr(Applications,i))






if __name__ == "__main__":
    if DEBUG:
        sys.argv.append(raw_input())
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'OptParseTest_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())



class AppError(Exception):
    def __init__(self,msg):
        super(AppError).__init__(type(self))
        self.message = msg

    def __str__(self):
        return self.message

    def __unicode__(self):
        return self.message